//定时任务实现，具体的实现通过策略模式获取asynRefreshProcessorMap.get(performSystem);

@Component("refreshTokenTaskCloverService")
public class RefreshTokenTaskCloverService extends AbstractScheduleTaskProcess<DeptShipperTokenRel> {
    private static final Logger logger = Logger.getLogger(RefreshTokenTaskCloverService.class);
    @Resource
    private DeptShipperTokenRelManager deptShipperTokenRelManager;

    private List<Integer> performSystemList;

    private Map<String, AsynRefreshProcessor> asynRefreshProcessorMap;

    @Override
    protected List<DeptShipperTokenRel> selectTasks(TaskServerParam taskServerParam, int curServer) {
        List<DeptShipperTokenRel> deptShipperTokenRels  = Lists.newArrayList();
        try {
            String serverArg = taskServerParam.getServerArg();
            if (StringUtils.isNotBlank(serverArg)) {
                // performSystem:time
                String[] serverArgs = serverArg.split(":");
                if (serverArgs.length < 1) {
                    return deptShipperTokenRels;
                }
                String performSystem = serverArgs[0]; // 通路
                String time = serverArgs[1]; // 时间
                AsynRefreshProcessor refreshProcessor = asynRefreshProcessorMap.get(performSystem);
                if (refreshProcessor == null) {
                    logger.error("参数:"+performSystem+ " 服务端参数"+ JSON.toJSONString(serverArg) + " 没有查询器");
                    return deptShipperTokenRels;
                }
                deptShipperTokenRels = refreshProcessor.getData(taskServerParam);
            }
            return deptShipperTokenRels;
        } catch (Exception e) {
            logger.error("刷新token服务失败:" + e);
            e.printStackTrace();
        }
        return Lists.newArrayList();
    }

 public void setPerformSystemList(List<Integer> performSystemList) {
        this.performSystemList = performSystemList;
    }

//必须加set不然报错
    public void setAsynRefreshProcessorMap(Map<String, AsynRefreshProcessor> asynRefreshProcessorMap) {
        this.asynRefreshProcessorMap = asynRefreshProcessorMap;
    }
}

//接口
public interface AsynRefreshProcessor {

    public List<DeptShipperTokenRel> getData(TaskServerParam taskServerParam);


    public boolean execute(DeptShipperTokenRel tokenRel);
}

//具体实现类
@Component("refreshKwaiTokenProcessor")
public class RefreshKwaiTokenProcessor  implements AsynRefreshProcessor {

    @Override
    public List<DeptShipperTokenRel> getData(TaskServerParam taskServerParam) {
        Map<String, Object> queryMap = getQueryMap(taskServerParam);
        List<DeptShipperTokenRel> deptShipperTokenRels = deptShipperTokenRelManager.findfindExtPlatformByMap(queryMap);
        return deptShipperTokenRels;
    }




property 的 name 属性值，在实体 bean 中必须有对应的 set 方法，否则报错 

  <bean id="refreshTokenTaskCloverService" class="com.jd.clps.master.clover.RefreshTokenTaskCloverService">

<!-- set方法注入 -->
        <property name="performSystemList">
            <list>
                <value>34</value>
            </list>
        </property>

        <property name="asynRefreshProcessorMap">
            <map>
                <entry key="34" value-ref="refreshKwaiTokenProcessor"/>
            </map>
        </property>
    </bean>




初始化代码
@Component
public class DefaultAttributeTemplate implements ApplicationContextAware {

    private final static Logger log  = LogManager.getLogger(DefaultAttributeTemplate.class);

    private GoodsAttributeTemplate goodsAttributeTemplate;

    private ApplicationContext applicationContext;


    /**
     * 初始化
     */
    @PostConstruct
    public void init() {
        GoodsAttributeTemplate attributeTemplate = null;
        try{
            String defaultGoodsAttributeTemplate = FileUtil.readJsonFile("output/template.json");
            if(StringUtils.isNotBlank(defaultGoodsAttributeTemplate)){
                attributeTemplate = JsonUtil.fromJson(defaultGoodsAttributeTemplate,GoodsAttributeTemplate.class);
            }
        } catch (Exception e){
            log.error("默认保质期模板获取异常");
        }
        goodsAttributeTemplate = attributeTemplate;
    }

    public GoodsAttributeTemplate getDefaultGoodsAttributeTemplate(){
        return goodsAttributeTemplate;
    }

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.applicationContext = applicationContext;
    }

}



public class FileUtils {


    /**
     * 读取json文件
     * @param fileName
     * @return
     */
    public static String readJsonFile(String fileName) {
        FileReader fileReader = null;
        Reader reader = null;
        try {
            ClassPathResource classPathResource = new ClassPathResource(fileName);
            File jsonFile = classPathResource.getFile();
            fileReader = new FileReader(jsonFile);
            reader = new InputStreamReader(new FileInputStream(jsonFile),"utf-8");
            int ch;
            StringBuffer sb = new StringBuffer();
            while ((ch = reader.read()) != -1) {
                sb.append((char) ch);
            }
            fileReader.close();
            reader.close();
            String jsonStr = sb.toString();
            return jsonStr;
        } catch (IOException e) {

        } finally {
            if(fileReader != null){
                try {
                    fileReader.close();
                } catch (IOException e) {

                }
            }
            if(reader != null){
                try {
                    reader.close();
                } catch (IOException e) {
                }
            }
        }
        return null;
    }
}

